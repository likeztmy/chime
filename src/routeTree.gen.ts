/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as IndexImport } from './pages/index'
import { Route as standaloneLayoutImport } from './pages/(standalone)/_layout'
import { Route as dashboardWelcomeImport } from './pages/(dashboard)/welcome'
import { Route as dashboardLayoutImport } from './pages/(dashboard)/_layout'
import { Route as authLoginImport } from './pages/(auth)/login'
import { Route as standaloneLayoutProfileImport } from './pages/(standalone)/_layout/profile'
import { Route as dashboardLayoutTasksIndexImport } from './pages/(dashboard)/_layout/tasks/index'
import { Route as dashboardLayoutDocsIndexImport } from './pages/(dashboard)/_layout/docs/index'
import { Route as dashboardLayoutChatIndexImport } from './pages/(dashboard)/_layout/chat/index'
import { Route as standaloneLayoutUserProfileImport } from './pages/(standalone)/_layout.user/profile'
import { Route as dashboardLayoutDocsIdImport } from './pages/(dashboard)/_layout/docs/$id'

// Create Virtual Routes

const standaloneImport = createFileRoute('/(standalone)')()
const dashboardImport = createFileRoute('/(dashboard)')()

// Create/Update Routes

const standaloneRoute = standaloneImport.update({
  id: '/(standalone)',
  getParentRoute: () => rootRoute,
} as any)

const dashboardRoute = dashboardImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const standaloneLayoutRoute = standaloneLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => standaloneRoute,
} as any)

const dashboardWelcomeRoute = dashboardWelcomeImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => dashboardRoute,
} as any)

const dashboardLayoutRoute = dashboardLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => dashboardRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const standaloneLayoutProfileRoute = standaloneLayoutProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => standaloneLayoutRoute,
} as any)

const dashboardLayoutTasksIndexRoute = dashboardLayoutTasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => dashboardLayoutRoute,
} as any)

const dashboardLayoutDocsIndexRoute = dashboardLayoutDocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => dashboardLayoutRoute,
} as any)

const dashboardLayoutChatIndexRoute = dashboardLayoutChatIndexImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => dashboardLayoutRoute,
} as any)

const standaloneLayoutUserProfileRoute =
  standaloneLayoutUserProfileImport.update({
    id: '/user/profile',
    path: '/user/profile',
    getParentRoute: () => standaloneLayoutRoute,
  } as any)

const dashboardLayoutDocsIdRoute = dashboardLayoutDocsIdImport.update({
  id: '/docs/$id',
  path: '/docs/$id',
  getParentRoute: () => dashboardLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/_layout': {
      id: '/(dashboard)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardLayoutImport
      parentRoute: typeof dashboardRoute
    }
    '/(dashboard)/welcome': {
      id: '/(dashboard)/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof dashboardWelcomeImport
      parentRoute: typeof dashboardImport
    }
    '/(standalone)': {
      id: '/(standalone)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof standaloneImport
      parentRoute: typeof rootRoute
    }
    '/(standalone)/_layout': {
      id: '/(standalone)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof standaloneLayoutImport
      parentRoute: typeof standaloneRoute
    }
    '/(standalone)/_layout/profile': {
      id: '/(standalone)/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof standaloneLayoutProfileImport
      parentRoute: typeof standaloneLayoutImport
    }
    '/(dashboard)/_layout/docs/$id': {
      id: '/(dashboard)/_layout/docs/$id'
      path: '/docs/$id'
      fullPath: '/docs/$id'
      preLoaderRoute: typeof dashboardLayoutDocsIdImport
      parentRoute: typeof dashboardLayoutImport
    }
    '/(standalone)/_layout/user/profile': {
      id: '/(standalone)/_layout/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof standaloneLayoutUserProfileImport
      parentRoute: typeof standaloneLayoutImport
    }
    '/(dashboard)/_layout/chat/': {
      id: '/(dashboard)/_layout/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof dashboardLayoutChatIndexImport
      parentRoute: typeof dashboardLayoutImport
    }
    '/(dashboard)/_layout/docs/': {
      id: '/(dashboard)/_layout/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof dashboardLayoutDocsIndexImport
      parentRoute: typeof dashboardLayoutImport
    }
    '/(dashboard)/_layout/tasks/': {
      id: '/(dashboard)/_layout/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof dashboardLayoutTasksIndexImport
      parentRoute: typeof dashboardLayoutImport
    }
  }
}

// Create and export the route tree

interface dashboardLayoutRouteChildren {
  dashboardLayoutDocsIdRoute: typeof dashboardLayoutDocsIdRoute
  dashboardLayoutChatIndexRoute: typeof dashboardLayoutChatIndexRoute
  dashboardLayoutDocsIndexRoute: typeof dashboardLayoutDocsIndexRoute
  dashboardLayoutTasksIndexRoute: typeof dashboardLayoutTasksIndexRoute
}

const dashboardLayoutRouteChildren: dashboardLayoutRouteChildren = {
  dashboardLayoutDocsIdRoute: dashboardLayoutDocsIdRoute,
  dashboardLayoutChatIndexRoute: dashboardLayoutChatIndexRoute,
  dashboardLayoutDocsIndexRoute: dashboardLayoutDocsIndexRoute,
  dashboardLayoutTasksIndexRoute: dashboardLayoutTasksIndexRoute,
}

const dashboardLayoutRouteWithChildren = dashboardLayoutRoute._addFileChildren(
  dashboardLayoutRouteChildren,
)

interface dashboardRouteChildren {
  dashboardLayoutRoute: typeof dashboardLayoutRouteWithChildren
  dashboardWelcomeRoute: typeof dashboardWelcomeRoute
}

const dashboardRouteChildren: dashboardRouteChildren = {
  dashboardLayoutRoute: dashboardLayoutRouteWithChildren,
  dashboardWelcomeRoute: dashboardWelcomeRoute,
}

const dashboardRouteWithChildren = dashboardRoute._addFileChildren(
  dashboardRouteChildren,
)

interface standaloneLayoutRouteChildren {
  standaloneLayoutProfileRoute: typeof standaloneLayoutProfileRoute
  standaloneLayoutUserProfileRoute: typeof standaloneLayoutUserProfileRoute
}

const standaloneLayoutRouteChildren: standaloneLayoutRouteChildren = {
  standaloneLayoutProfileRoute: standaloneLayoutProfileRoute,
  standaloneLayoutUserProfileRoute: standaloneLayoutUserProfileRoute,
}

const standaloneLayoutRouteWithChildren =
  standaloneLayoutRoute._addFileChildren(standaloneLayoutRouteChildren)

interface standaloneRouteChildren {
  standaloneLayoutRoute: typeof standaloneLayoutRouteWithChildren
}

const standaloneRouteChildren: standaloneRouteChildren = {
  standaloneLayoutRoute: standaloneLayoutRouteWithChildren,
}

const standaloneRouteWithChildren = standaloneRoute._addFileChildren(
  standaloneRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof standaloneLayoutRouteWithChildren
  '/login': typeof authLoginRoute
  '/welcome': typeof dashboardWelcomeRoute
  '/profile': typeof standaloneLayoutProfileRoute
  '/docs/$id': typeof dashboardLayoutDocsIdRoute
  '/user/profile': typeof standaloneLayoutUserProfileRoute
  '/chat': typeof dashboardLayoutChatIndexRoute
  '/docs': typeof dashboardLayoutDocsIndexRoute
  '/tasks': typeof dashboardLayoutTasksIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof standaloneLayoutRouteWithChildren
  '/login': typeof authLoginRoute
  '/welcome': typeof dashboardWelcomeRoute
  '/profile': typeof standaloneLayoutProfileRoute
  '/docs/$id': typeof dashboardLayoutDocsIdRoute
  '/user/profile': typeof standaloneLayoutUserProfileRoute
  '/chat': typeof dashboardLayoutChatIndexRoute
  '/docs': typeof dashboardLayoutDocsIndexRoute
  '/tasks': typeof dashboardLayoutTasksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)/login': typeof authLoginRoute
  '/(dashboard)': typeof dashboardRouteWithChildren
  '/(dashboard)/_layout': typeof dashboardLayoutRouteWithChildren
  '/(dashboard)/welcome': typeof dashboardWelcomeRoute
  '/(standalone)': typeof standaloneRouteWithChildren
  '/(standalone)/_layout': typeof standaloneLayoutRouteWithChildren
  '/(standalone)/_layout/profile': typeof standaloneLayoutProfileRoute
  '/(dashboard)/_layout/docs/$id': typeof dashboardLayoutDocsIdRoute
  '/(standalone)/_layout/user/profile': typeof standaloneLayoutUserProfileRoute
  '/(dashboard)/_layout/chat/': typeof dashboardLayoutChatIndexRoute
  '/(dashboard)/_layout/docs/': typeof dashboardLayoutDocsIndexRoute
  '/(dashboard)/_layout/tasks/': typeof dashboardLayoutTasksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/welcome'
    | '/profile'
    | '/docs/$id'
    | '/user/profile'
    | '/chat'
    | '/docs'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/welcome'
    | '/profile'
    | '/docs/$id'
    | '/user/profile'
    | '/chat'
    | '/docs'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/(auth)/login'
    | '/(dashboard)'
    | '/(dashboard)/_layout'
    | '/(dashboard)/welcome'
    | '/(standalone)'
    | '/(standalone)/_layout'
    | '/(standalone)/_layout/profile'
    | '/(dashboard)/_layout/docs/$id'
    | '/(standalone)/_layout/user/profile'
    | '/(dashboard)/_layout/chat/'
    | '/(dashboard)/_layout/docs/'
    | '/(dashboard)/_layout/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authLoginRoute: typeof authLoginRoute
  dashboardRoute: typeof dashboardRouteWithChildren
  standaloneRoute: typeof standaloneRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authLoginRoute: authLoginRoute,
  dashboardRoute: dashboardRouteWithChildren,
  standaloneRoute: standaloneRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)/login",
        "/(dashboard)",
        "/(standalone)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(dashboard)": {
      "filePath": "(dashboard)",
      "children": [
        "/(dashboard)/_layout",
        "/(dashboard)/welcome"
      ]
    },
    "/(dashboard)/_layout": {
      "filePath": "(dashboard)/_layout.tsx",
      "parent": "/(dashboard)",
      "children": [
        "/(dashboard)/_layout/docs/$id",
        "/(dashboard)/_layout/chat/",
        "/(dashboard)/_layout/docs/",
        "/(dashboard)/_layout/tasks/"
      ]
    },
    "/(dashboard)/welcome": {
      "filePath": "(dashboard)/welcome.tsx",
      "parent": "/(dashboard)"
    },
    "/(standalone)": {
      "filePath": "(standalone)",
      "children": [
        "/(standalone)/_layout"
      ]
    },
    "/(standalone)/_layout": {
      "filePath": "(standalone)/_layout.tsx",
      "parent": "/(standalone)",
      "children": [
        "/(standalone)/_layout/profile",
        "/(standalone)/_layout/user/profile"
      ]
    },
    "/(standalone)/_layout/profile": {
      "filePath": "(standalone)/_layout/profile.tsx",
      "parent": "/(standalone)/_layout"
    },
    "/(dashboard)/_layout/docs/$id": {
      "filePath": "(dashboard)/_layout/docs/$id.tsx",
      "parent": "/(dashboard)/_layout"
    },
    "/(standalone)/_layout/user/profile": {
      "filePath": "(standalone)/_layout.user/profile.tsx",
      "parent": "/(standalone)/_layout"
    },
    "/(dashboard)/_layout/chat/": {
      "filePath": "(dashboard)/_layout/chat/index.tsx",
      "parent": "/(dashboard)/_layout"
    },
    "/(dashboard)/_layout/docs/": {
      "filePath": "(dashboard)/_layout/docs/index.tsx",
      "parent": "/(dashboard)/_layout"
    },
    "/(dashboard)/_layout/tasks/": {
      "filePath": "(dashboard)/_layout/tasks/index.tsx",
      "parent": "/(dashboard)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
